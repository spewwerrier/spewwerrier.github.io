[{"url":"https://luitelaagaman.com.np/","title":"","description":null,"body":"","path":null},{"url":"https://luitelaagaman.com.np/extras/custom-kernel/","title":"compiling custom kernel just for fun","description":null,"body":"Compiling custom kernel is easy actually, configuring is hard. There are some set of\nconfigurations that you must need for your kernel to boot, at least that what happened\nto me.\nstep1: clone the kernel\n\nstep 2\n\nThis is where things get trickier. So gentoo has lots of documentation for kernel configurations.\nSome of the links I found useful\n\nhttps://wiki.gentoo.org/wiki/Kernel#Configuration\nhttps://wiki.gentoo.org/wiki/Zram#Enabling_zram_support_in_kernel\nhttps://wiki.gentoo.org/wiki/Framebuffer\nhttps://wiki.gentoo.org/wiki/Bluetooth\n\nstep 3: Follow arch wiki\nhttps://wiki.archlinux.org/title/Kernel/Traditional_compilation\nI use systemd boot so I just have to make a new loader as\n/boot/loader/entries/linux-spaceship.conf\n\nand my kernel is there when I start my pc.\nSo why do this? Two reasons: because its fun to configure/compile your custom kernel with your\nown name and second, I disabled internet in this kernel to stop myself from any internet activity.\nAnother thing is I also noticed my boot time got faster, maybe its because my kernel is\nminimal and does not has any extra modules enabled and is compiled in my machine.\n","path":null},{"url":"https://luitelaagaman.com.np/extras/testing/","title":"testing","description":null,"body":"This is testing. Current text are paragraph and they are the primary fonts. Heading and blockquote have differtent fonts.\nHeading or smth idk\n\n\nThis is a blockquote - Sun Tzu\n\n\n\n\nDouble blockquote can also be done - Sun Tzu\n\n\n\n\n\n\n\n\n\nNOW THATS TOO MUCH - Sun Tzu\n\n\n\n\n\n\n\nthis is a list\n\noh wat\n\noh oh wat\n\noh oh oh oh watt\n\n\n\n\n\n\n\n\nthis is also a list\n\na sneaky monospace text hidden in a paragraph\n","path":null},{"url":"https://luitelaagaman.com.np/extras/selfhost/","title":"selfhost","description":null,"body":"So I've been selfhosting git forge, dashboard, and OCW courses and I don't think I need any more\nservices in life.\nI only have account in discord (for gaming), github, facebook (planning to get rid of),\nanilist (meh its just there), tailscale, stremio, and google. That's it, total of 7. I have not found use of any\nsass software, social media or any free tier of login software (except mentioned above).\nI also switched my notetaking method, instead of being dependent on something huge like obsidian (better\nthan notion), I have a pkm lsp (markdown-oxide) with a spellchecker (harper-ls) and thats it. All offline,\nno data needed or sent anywhere.\nI believe many people will be happy to selfhost but they just don't know :)\n","path":null},{"url":"https://luitelaagaman.com.np/writings/reverseproxy/","title":"Writing a load balancer in golang","description":null,"body":"Reverse proxy\nFrom cloudfare: A reverse proxy is a server that sits in front of web servers and forwards client (e.g. web browser) requests to those web servers.\nSo our objective is to create a server that feeds in the request, send the request to one of our server and send back the request. And to make it more interesting let us make our reverse proxy decide the efficient server. Our reverse proxy will sit on Layer 4 of OSI model (Transport layer) and choose server it wants. This is essentially a L4 load balancer.\nExisting load balancer\nI tried https://github.com/yyyar/gobetween which is a L4 load balancer with a configuration\nsystem. All you have to do is define your servers in gobetween.toml file and run the load balancer.\nAnd your request to loadbalancer will be forwarded into servers. Now that we know what we want\nlets simulate our load balancer\n\n\nLoadbalancer takes an request\n\n\nServer1 is located on http://localhost:4444\n\n\nServer2 is located on http://localhost:4445\n\n\nOur load balancer (reverse proxy) is located on http://localhost:3000\n\nIt has 2 servers configured at localhost:{4444,4445}\n\n\n\nrequest come to http://localhost:3000\n\n\nforwards the request to Server1 or Server2\n\n\nget the result\n\n\nWriting our own\nWe will be using golang since it just works and thats what I'm most comfortable when it comes\nto developing servers.\nServer endpoints\nLets define our server, instead of using configuration files and parsing them, I will be hardcoding\nthem into our source.\n\nCreating dummy servers\nMake a separate folder and write the dummy servers. We will not be writing any super complicated servers but\nthey should work as well. I have tested this load balancer in some of my local http projects and it just works but for now\nlet us be simple. This server just prints which server it is, how many times it has been called and the headers\nit is receiving.\n\nCreate 3-4 of these and put the address in SERVERS in our loadbalancer.\nThe load balancer\nGolang has a powerful standard library which lets us use net, http, templates, crypto and many more\nwithout external library. For now we will only be using net since it provides TCP/UDP network methods\nwhich we need.\nOur loadbalancer is still a server even if it makes request to another server.\nListen announces on the local network address. The network must be \"tcp\", \"tcp4\", \"tcp6\", \"unix\" or \"unixpacket\".\nSounds like what we want. A server with tcp capabilities.\n\nNote that localhost does not makes our server accessible from other machines, we need to use 0.0.0.0.\nThis applies everywhere. Use \"localhost:3000\" if you are communicating in your machine only or \"0.0.0.0:3000\" if\ncommunicating through IPs. I will be using \"localhost:3000\" since I am not making request through another device/ip.\nAnd now we want to actually listen using the listener\n\nAccept waits for and returns the next connection to the listener. It returns a new connection\nfrom the incoming request. Lets do a simple ping test\n\nTerminal (main)\n\nTerminal (curl)\n\nTerminal (main)\n\nSeems to be working.\nnet also provides methods to connect to other servers with net.Dial\n\nDial one of our server as soon as we get a request. This program\npanics if SERVER1 is not active. Definitely a good thing. Now we read the incoming request and send to one of our servers.\n\nNow replacing comments with code we get a reverse proxy in our hands. This works becase\nhttp is essentially a TCP connection with http headers. When receiving http headers on our TCP server\nwe will just forward that http headers to the underlying servers. This is not the same for https servers where it\nhas a TLS/SSL layer on top which makes the header encrypted.\n\nThe actual load balancer\nNow that we know the basics of our reverse proxy, lets add a\nload balancer algorithm and decide the server on runtime. This can be implemented however we like. I'll be focusing on 2 algorithms.\nOne is silly. Before lets make above code readable and reusable.\n\nRound Robin Algorithm\nRound robin algorithm distributes work evenly among all available resources.\nIn our case we will send request to SERVER1, SERVER2,... SERVER Nth, SERVER1, SERVER2.... and so on where nth is the\nlast server. This is not a full proof algorithm since in\nreal world there are better algorithms suited where the\nload balancer has the workload stats of the server and\nit chooses the most optimal one based on resource\navailability. We use round robin because its one of the\nalgorithm used to create load balancer, and its simple.\nFortunately go makes this super easy. Lets create a struct called stateful servers since every server will have\na state where the state is number of time it is called\n\nNow for round robin we want our dial function to call any SERVER. Any SERVER that gets returned, its state is increased by one. For this we will find out the SERVER\nwith least state. And return that server.\n\nAnd thats it! Our load balancer is now complete.\n\nRandom Robin\nThis is just choosing random servers but since I used\nround robin earlier I will call this random robin. Kind\nof silly but this is also the fun in programming.\n\nUse RandomRobin or RoundRobin the fact that our reverse proxy\nchooses a server on its own makes it a load balancer that\njust works.\nAccepting HTTPS connections\nAccording to cloudfare: HTTPS is just the HTTP protocol but with data encryption using SSL/TLS.\nSo adding a tls config to our loadbalancer should make our http only to https supported.\nHere is a great gist on how to create certificate and use tls in golang. And I followed the\nsame guide and will be referencing this as the guide.\n\nhttps://gist.github.com/denji/12b3a568f092ab951456\n\nModifying our original server to https\nAfter creating certificates\n\nUpgrade loadbalancer to https (optional)\nA load balancer can stay without tls and can make request to https connection. Its not\na requirement for communication but we will do here since why not. Again, make a new\ncertificate or use your old ones we used in our original server.\nFor tls config we should replace net with tls \"crypto/package\". LoadX509KeyPair parses a public and private key from a PEM encoded files (our openssl certificate).\n\nThis is server part, now our loadbalancer can be called through https://localhost:3000 but it still cannot\ncommunicate to https servers.\nLoadbalancer to support https request/response\nFor our load balancer to make a tls request, the connection should include the tls certificate of the server. In our case we are\nassuming every connection is https and have same tls config of server.crt. This cal also be seen in config file of gobetween.\nhttps://github.com/yyyar/gobetween/blob/6e185295c8476810c64a27f5da28edd778e23423/config/gobetween.toml#L153\n\nIf we don't want to verify the tls of servers we can just ignore the\nverification process, this way we don't have to remember tls\ncertificate of every server but we are essentially ignoring the\ntls step. It should only be used for testing.\n\nFinalizing\nNow all that is left is to create a proper configuration system. I will be coding these\nin the code itself, creating a struct for server like this\n\nThe other code is pretty much same with servers defined in main and changing data types of\nour Round Robin algorithm. Here is the final code for our load balancer that support http as\nwell as https\n\n","path":null},{"url":"https://luitelaagaman.com.np/extras/year-of-linux-2025/","title":"personal/year_of_linux_2025.md","description":null,"body":"For me linux has already won me but for regular people linux has still a long way.\nRecently I installed arch on a laptop and for a not tech savy person. And this thing was nightmare for me to setup.\nI tried cosmic which was fairly okay, ootb experience was supposed to include everything but\nafter 20mins of exploration and making it feel more like windows/mate I realized none of the\nbluelight filter work. It was due to cosmic not implementing wlr gamma control procotol.\nBummer. This was a must have so waste of my time.\nNow I wanted a login system, cosmic-greet worked fine but it does not remembers old user,\nmeaning same user is in default login every time. Yep.\nI went with regreet and despite annoying ux it was fine.\n(Enter to select session and password and enter, imo a bad design)\nGiven up on cosmic I tried KDE, KDE does not launch. I tried x version but that does not\neven work on my own desktop and it did not launch here as well.\nLast time I had kde up and running and stock experience is good but there are so many nifty\nlittle things that makes you go mad. Like there is no battery indicator, like half of the\ntimes it showed battery percentage half of the time it did not. And the frequent crashes\nmade made us both go nuts that time (2024).\nAfter thinking for some while I did unimaginable. GNOME. I always used to hate gnome but I\nquestioned myself. Why does fedora use gnome? I don't know better than fedora. I installed\ngnome and oh boy everything was there. No over customization needed like KDE. Battery percentage\nwas there. It did not crash, froze, everything was cute and smooth. There was a blue light\nfilter. Albeit I had to figure out setting to same time 4am to 4am made the blue light\npermanent throughout the day instead of just having a toggle button for it, but hey\nit works... which you might say. Surprise logging with greetd means you have to enter\npassword on brave every time you launch on a new boot. This was a simple fix, just use\ngnome stock login manager. I also had to install gnome dock extension which is very much\na necessity for a regular user. Gnome does not looks like windows, not does it try to be better\nthan windows, it has its own niche and it just works.\nLast thing to mention, without tlp battery performance is just worse.\nAll the above things a regular user should know just to make their environment usable\nis a bad. No non-tech enthusiast will be able to do that.\nWith non tech people I would say just use\nwindows for now. There are two sets of people, who care and who does not. Non tech people\ndon't care similar as most of the hobbies I don't care. No one should force them and especially\nwhen the state of linux desktop is like this.\n","path":null},{"url":"https://luitelaagaman.com.np/extras/lsp-symbols/","title":"LSP symbols","description":null,"body":"Many people miss out on lsp symbols picker. It is available in helix, zed and\nsimilar plugin might exist for neovim. Symbol picker gathers all the code declaration\nlike class, variable, functions and so on. Combined with fuzzy picker you can\ngrep the code declerations very fast. This is efficient when comments pollute the\nfunction name you are searching for.\n\nThis is an example of symbol picker in helix. The symbols can also be\nfiltered with %kind ___% syntax.\n","path":null},{"url":"https://luitelaagaman.com.np/about/","title":"About me","description":null,"body":"","path":null},{"url":"https://luitelaagaman.com.np/about/about/","title":"About me","description":null,"body":"Hi, welcome to my spaceship.\nThis is my fun little space where I write about my hobbies.\nI primarily prefer Go &amp; Js and I am learning Scala atm.\nWorkflow includes linux/helix/tmux\nBrief summary of myself\n\nLikes simplicity\nLikes learning new programming language\nAppreciate classical and unique art\nHobbies are Anime &amp; Books &amp; Linux\nArknights music is always on background\n\nLinks:\n@github\n@discord\nmail\n","path":null},{"url":"https://luitelaagaman.com.np/extras/","title":"List of blog posts","description":null,"body":"","path":null},{"url":"https://luitelaagaman.com.np/extras/year-of-linux-2025/","title":"personal/year_of_linux_2025.md","description":null,"body":"For me linux has already won me but for regular people linux has still a long way.\nRecently I installed arch on a laptop and for a not tech savy person. And this thing was nightmare for me to setup.\nI tried cosmic which was fairly okay, ootb experience was supposed to include everything but\nafter 20mins of exploration and making it feel more like windows/mate I realized none of the\nbluelight filter work. It was due to cosmic not implementing wlr gamma control procotol.\nBummer. This was a must have so waste of my time.\nNow I wanted a login system, cosmic-greet worked fine but it does not remembers old user,\nmeaning same user is in default login every time. Yep.\nI went with regreet and despite annoying ux it was fine.\n(Enter to select session and password and enter, imo a bad design)\nGiven up on cosmic I tried KDE, KDE does not launch. I tried x version but that does not\neven work on my own desktop and it did not launch here as well.\nLast time I had kde up and running and stock experience is good but there are so many nifty\nlittle things that makes you go mad. Like there is no battery indicator, like half of the\ntimes it showed battery percentage half of the time it did not. And the frequent crashes\nmade made us both go nuts that time (2024).\nAfter thinking for some while I did unimaginable. GNOME. I always used to hate gnome but I\nquestioned myself. Why does fedora use gnome? I don't know better than fedora. I installed\ngnome and oh boy everything was there. No over customization needed like KDE. Battery percentage\nwas there. It did not crash, froze, everything was cute and smooth. There was a blue light\nfilter. Albeit I had to figure out setting to same time 4am to 4am made the blue light\npermanent throughout the day instead of just having a toggle button for it, but hey\nit works... which you might say. Surprise logging with greetd means you have to enter\npassword on brave every time you launch on a new boot. This was a simple fix, just use\ngnome stock login manager. I also had to install gnome dock extension which is very much\na necessity for a regular user. Gnome does not looks like windows, not does it try to be better\nthan windows, it has its own niche and it just works.\nLast thing to mention, without tlp battery performance is just worse.\nAll the above things a regular user should know just to make their environment usable\nis a bad. No non-tech enthusiast will be able to do that.\nWith non tech people I would say just use\nwindows for now. There are two sets of people, who care and who does not. Non tech people\ndon't care similar as most of the hobbies I don't care. No one should force them and especially\nwhen the state of linux desktop is like this.\n","path":null},{"url":"https://luitelaagaman.com.np/extras/selfhost/","title":"selfhost","description":null,"body":"So I've been selfhosting git forge, dashboard, and OCW courses and I don't think I need any more\nservices in life.\nI only have account in discord (for gaming), github, facebook (planning to get rid of),\nanilist (meh its just there), tailscale, stremio, and google. That's it, total of 7. I have not found use of any\nsass software, social media or any free tier of login software (except mentioned above).\nI also switched my notetaking method, instead of being dependent on something huge like obsidian (better\nthan notion), I have a pkm lsp (markdown-oxide) with a spellchecker (harper-ls) and thats it. All offline,\nno data needed or sent anywhere.\nI believe many people will be happy to selfhost but they just don't know :)\n","path":null},{"url":"https://luitelaagaman.com.np/extras/testing/","title":"testing","description":null,"body":"This is testing. Current text are paragraph and they are the primary fonts. Heading and blockquote have differtent fonts.\nHeading or smth idk\n\n\nThis is a blockquote - Sun Tzu\n\n\n\n\nDouble blockquote can also be done - Sun Tzu\n\n\n\n\n\n\n\n\n\nNOW THATS TOO MUCH - Sun Tzu\n\n\n\n\n\n\n\nthis is a list\n\noh wat\n\noh oh wat\n\noh oh oh oh watt\n\n\n\n\n\n\n\n\nthis is also a list\n\na sneaky monospace text hidden in a paragraph\n","path":null},{"url":"https://luitelaagaman.com.np/extras/lsp-symbols/","title":"LSP symbols","description":null,"body":"Many people miss out on lsp symbols picker. It is available in helix, zed and\nsimilar plugin might exist for neovim. Symbol picker gathers all the code declaration\nlike class, variable, functions and so on. Combined with fuzzy picker you can\ngrep the code declerations very fast. This is efficient when comments pollute the\nfunction name you are searching for.\n\nThis is an example of symbol picker in helix. The symbols can also be\nfiltered with %kind ___% syntax.\n","path":null},{"url":"https://luitelaagaman.com.np/extras/custom-kernel/","title":"compiling custom kernel just for fun","description":null,"body":"Compiling custom kernel is easy actually, configuring is hard. There are some set of\nconfigurations that you must need for your kernel to boot, at least that what happened\nto me.\nstep1: clone the kernel\n\nstep 2\n\nThis is where things get trickier. So gentoo has lots of documentation for kernel configurations.\nSome of the links I found useful\n\nhttps://wiki.gentoo.org/wiki/Kernel#Configuration\nhttps://wiki.gentoo.org/wiki/Zram#Enabling_zram_support_in_kernel\nhttps://wiki.gentoo.org/wiki/Framebuffer\nhttps://wiki.gentoo.org/wiki/Bluetooth\n\nstep 3: Follow arch wiki\nhttps://wiki.archlinux.org/title/Kernel/Traditional_compilation\nI use systemd boot so I just have to make a new loader as\n/boot/loader/entries/linux-spaceship.conf\n\nand my kernel is there when I start my pc.\nSo why do this? Two reasons: because its fun to configure/compile your custom kernel with your\nown name and second, I disabled internet in this kernel to stop myself from any internet activity.\nAnother thing is I also noticed my boot time got faster, maybe its because my kernel is\nminimal and does not has any extra modules enabled and is compiled in my machine.\n","path":null},{"url":"https://luitelaagaman.com.np/writings/","title":"List of writing","description":null,"body":"","path":null},{"url":"https://luitelaagaman.com.np/writings/reverseproxy/","title":"Writing a load balancer in golang","description":null,"body":"Reverse proxy\nFrom cloudfare: A reverse proxy is a server that sits in front of web servers and forwards client (e.g. web browser) requests to those web servers.\nSo our objective is to create a server that feeds in the request, send the request to one of our server and send back the request. And to make it more interesting let us make our reverse proxy decide the efficient server. Our reverse proxy will sit on Layer 4 of OSI model (Transport layer) and choose server it wants. This is essentially a L4 load balancer.\nExisting load balancer\nI tried https://github.com/yyyar/gobetween which is a L4 load balancer with a configuration\nsystem. All you have to do is define your servers in gobetween.toml file and run the load balancer.\nAnd your request to loadbalancer will be forwarded into servers. Now that we know what we want\nlets simulate our load balancer\n\n\nLoadbalancer takes an request\n\n\nServer1 is located on http://localhost:4444\n\n\nServer2 is located on http://localhost:4445\n\n\nOur load balancer (reverse proxy) is located on http://localhost:3000\n\nIt has 2 servers configured at localhost:{4444,4445}\n\n\n\nrequest come to http://localhost:3000\n\n\nforwards the request to Server1 or Server2\n\n\nget the result\n\n\nWriting our own\nWe will be using golang since it just works and thats what I'm most comfortable when it comes\nto developing servers.\nServer endpoints\nLets define our server, instead of using configuration files and parsing them, I will be hardcoding\nthem into our source.\n\nCreating dummy servers\nMake a separate folder and write the dummy servers. We will not be writing any super complicated servers but\nthey should work as well. I have tested this load balancer in some of my local http projects and it just works but for now\nlet us be simple. This server just prints which server it is, how many times it has been called and the headers\nit is receiving.\n\nCreate 3-4 of these and put the address in SERVERS in our loadbalancer.\nThe load balancer\nGolang has a powerful standard library which lets us use net, http, templates, crypto and many more\nwithout external library. For now we will only be using net since it provides TCP/UDP network methods\nwhich we need.\nOur loadbalancer is still a server even if it makes request to another server.\nListen announces on the local network address. The network must be \"tcp\", \"tcp4\", \"tcp6\", \"unix\" or \"unixpacket\".\nSounds like what we want. A server with tcp capabilities.\n\nNote that localhost does not makes our server accessible from other machines, we need to use 0.0.0.0.\nThis applies everywhere. Use \"localhost:3000\" if you are communicating in your machine only or \"0.0.0.0:3000\" if\ncommunicating through IPs. I will be using \"localhost:3000\" since I am not making request through another device/ip.\nAnd now we want to actually listen using the listener\n\nAccept waits for and returns the next connection to the listener. It returns a new connection\nfrom the incoming request. Lets do a simple ping test\n\nTerminal (main)\n\nTerminal (curl)\n\nTerminal (main)\n\nSeems to be working.\nnet also provides methods to connect to other servers with net.Dial\n\nDial one of our server as soon as we get a request. This program\npanics if SERVER1 is not active. Definitely a good thing. Now we read the incoming request and send to one of our servers.\n\nNow replacing comments with code we get a reverse proxy in our hands. This works becase\nhttp is essentially a TCP connection with http headers. When receiving http headers on our TCP server\nwe will just forward that http headers to the underlying servers. This is not the same for https servers where it\nhas a TLS/SSL layer on top which makes the header encrypted.\n\nThe actual load balancer\nNow that we know the basics of our reverse proxy, lets add a\nload balancer algorithm and decide the server on runtime. This can be implemented however we like. I'll be focusing on 2 algorithms.\nOne is silly. Before lets make above code readable and reusable.\n\nRound Robin Algorithm\nRound robin algorithm distributes work evenly among all available resources.\nIn our case we will send request to SERVER1, SERVER2,... SERVER Nth, SERVER1, SERVER2.... and so on where nth is the\nlast server. This is not a full proof algorithm since in\nreal world there are better algorithms suited where the\nload balancer has the workload stats of the server and\nit chooses the most optimal one based on resource\navailability. We use round robin because its one of the\nalgorithm used to create load balancer, and its simple.\nFortunately go makes this super easy. Lets create a struct called stateful servers since every server will have\na state where the state is number of time it is called\n\nNow for round robin we want our dial function to call any SERVER. Any SERVER that gets returned, its state is increased by one. For this we will find out the SERVER\nwith least state. And return that server.\n\nAnd thats it! Our load balancer is now complete.\n\nRandom Robin\nThis is just choosing random servers but since I used\nround robin earlier I will call this random robin. Kind\nof silly but this is also the fun in programming.\n\nUse RandomRobin or RoundRobin the fact that our reverse proxy\nchooses a server on its own makes it a load balancer that\njust works.\nAccepting HTTPS connections\nAccording to cloudfare: HTTPS is just the HTTP protocol but with data encryption using SSL/TLS.\nSo adding a tls config to our loadbalancer should make our http only to https supported.\nHere is a great gist on how to create certificate and use tls in golang. And I followed the\nsame guide and will be referencing this as the guide.\n\nhttps://gist.github.com/denji/12b3a568f092ab951456\n\nModifying our original server to https\nAfter creating certificates\n\nUpgrade loadbalancer to https (optional)\nA load balancer can stay without tls and can make request to https connection. Its not\na requirement for communication but we will do here since why not. Again, make a new\ncertificate or use your old ones we used in our original server.\nFor tls config we should replace net with tls \"crypto/package\". LoadX509KeyPair parses a public and private key from a PEM encoded files (our openssl certificate).\n\nThis is server part, now our loadbalancer can be called through https://localhost:3000 but it still cannot\ncommunicate to https servers.\nLoadbalancer to support https request/response\nFor our load balancer to make a tls request, the connection should include the tls certificate of the server. In our case we are\nassuming every connection is https and have same tls config of server.crt. This cal also be seen in config file of gobetween.\nhttps://github.com/yyyar/gobetween/blob/6e185295c8476810c64a27f5da28edd778e23423/config/gobetween.toml#L153\n\nIf we don't want to verify the tls of servers we can just ignore the\nverification process, this way we don't have to remember tls\ncertificate of every server but we are essentially ignoring the\ntls step. It should only be used for testing.\n\nFinalizing\nNow all that is left is to create a proper configuration system. I will be coding these\nin the code itself, creating a struct for server like this\n\nThe other code is pretty much same with servers defined in main and changing data types of\nour Round Robin algorithm. Here is the final code for our load balancer that support http as\nwell as https\n\n","path":null}]